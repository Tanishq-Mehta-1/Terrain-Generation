#version 460

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D imgOut;

//randomly arranged 512 integers
const int p[512] = {
    151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,
    140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,
    120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,
    177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,
    165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,
    211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,
    25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,
    196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,
    217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,
    206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,
    248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,
    22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,
    246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,
    51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,
    84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,
    114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,

    // duplicate of the above 256 values:
    151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,
    140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,
    120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,
    177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,
    165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,
    211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,
    25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,
    196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,
    217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,
    206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,
    248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,
    22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,
    246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,
    51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,
    84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,
    114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
};

uniform int repeat;
uniform int octaves;
uniform float scale;
uniform float persistence;
uniform int flag;

float fade(float t) {
	return t * t * t * (t * (6 * t - 15) + 10);
}

float lerp(float a, float b, float t) {
	return a + t * (b - a);
}

int inc(int num) {
	num++;
	if (repeat > 0)
		num = num % repeat;

	return num;
}

float grad(int hash, float x, float y) {
	int h = hash & 7;
	float u = (h < 4) ? x : y;
	float v = (h < 4) ? y : x;

	return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

float perlin(float x, float y) {

	if (repeat > 0) {
		x = mod(x, repeat);
		y = mod(y, repeat);
	}

	//extract int [range 0,255] and float
	int xi = int(floor(x)) & 255;
	int yi = int(floor(y)) & 255;
	float xf = x - floor(x);
	float yf = y - floor(y);

	float u = fade(xf);
	float v = fade(yf);

	//hashing
	int aa, ab, ba, bb;
	aa = p[p[xi] + yi];
	ab = p[p[xi] + inc(yi)];
	ba = p[p[inc(xi)] + yi];
	bb = p[p[inc(xi)] + inc(yi)];

	float x1, x2, res;
	x1 = lerp(grad(aa, xf, yf), grad(ba, xf - 1, yf), u);
	x2 = lerp(grad(ab, xf, yf - 1), grad(bb, xf - 1, yf - 1), u);

	res = lerp(x1, x2, v);

	return (res + 1) / 2.0;
}

float octavePerlin(float x, float y) {
	float total = 0;
	float frequency = 1;
	float amplitude = 1;
	float maxValue = 0;

	for (int i = 0; i < octaves; i++) {
		total += perlin(x * frequency, y * frequency) * amplitude;

		maxValue += amplitude;
		amplitude *= persistence;
		frequency *= 2;

		//use diff values of products to change frequency, like 3, e^1.23 etc
	}

	return total / maxValue;
}

float octavePerlin(vec2 vec) {
	return octavePerlin(vec.x, vec.y);
}

float DW_Perlin(vec2 p) {
	vec2 q = vec2(
		octavePerlin(p + vec2(0.0, 0.0)),
		octavePerlin(p + vec2(5.2, 1.3))
	);

	vec2 r = vec2(
		octavePerlin(p + 4.0f * q + vec2(1.7, 9.2)),
		octavePerlin(p + 4.0f * q + vec2(8.3, 2.8))
	);

	return octavePerlin(p + 4.0f * r);
}

void main(){
	
	ivec2 globalCoord = ivec2(gl_GlobalInvocationID.xy);

	ivec2 size = imageSize(imgOut);
	if (globalCoord.x >= size.x || globalCoord.y >= size.y) return;

	vec2 uv = vec2(globalCoord) * scale ;

	float pixel_val;
	if (flag == 0)
		pixel_val = perlin(uv.x, uv.y);
	else if (flag == 1)
		pixel_val = octavePerlin(uv);
	else if (flag == 2)
		pixel_val = DW_Perlin(uv);

	vec4 value = vec4(pixel_val, 0.0f, 0.0f, 1.0f);
	//value = vec4(uv, 1.0f, 1.0f);
	
	imageStore(imgOut, globalCoord, value);
}

